// --- Global UI Element Shit ----
const moneyDisplay = document.getElementById('money-display');
const gameArea = document.getElementById('game-area');
const messageBox = document.getElementById('message-box');

// --- Game Varibles ---
let playerMoney = 100.00;
let currentGridSize = 0;
let currentRiskLevel = '';
let minesGridState = [];
let minesCount = 0;
let tilesRevealed = 0;
let currentMultiplier = 1.0;
let multiplierPerTile = 0; 


const GRID_SIZES = [3, 5, 7, 9, 11, 13]; 

const RISK_LEVELS = {
    'low': { minePercentage: 0.10, multiplierIncrease: 0.10 },
    'medium': { minePercentage: 0.15, multiplierIncrease: 0.15 },
    'high': { minePercentage: 0.20, multiplierIncrease: 0.20 },
    'extreme': { minePercentage: 0.25, multiplierIncrease: 0.25 }
};

// ---Utility Fucktions ----
function updateMoneyDisplay() {
    moneyDisplay.textContent = playerMoney.toFixed(2);
}

function showMessage(message, isError = false) {
    messageBox.textContent = message;
    messageBox.style.color = isError ? '#ff5e5e' : '#9aff9a';
}

// --- Game Flo Fucktions---

function showStartScreen() {
    gameArea.innerHTML = `
        <div id="start-screen" class="stage-card">
            <h2>Welcome!</h2>
            <p>Test your fucking luck and win big!</p>
            <h3>A Mines Sim inspired by Stake thingy. Tried recreating Plinko but failed :( <br> Have fun -ES </h3>
            <button id="start-button">Hell yeah</button>
        </div>
    `;
    document.getElementById('start-button').addEventListener('click', showSelectionScreen);
    showMessage('');
}

function showSelectionScreen() {
    gameArea.innerHTML = `
        <div class="stage-card">
            <h2>Choose Your Challenge</h2>
            <p>Select grid size:</p>
            <div class="selection-buttons" id="grid-size-buttons">
                ${GRID_SIZES.map(size => `<button data-size="${size}">${size}x${size}</button>`).join('')}
            </div>
            <p>Select risk level:</p>
            <div class="selection-buttons" id="risk-level-buttons">
                ${Object.keys(RISK_LEVELS).map(level => `<button data-risk="${level}">${level.charAt(0).toUpperCase() + level.slice(1)}</button>`).join('')}
            </div>
            <button id="start-game-button" disabled>Start Game</button>
        </div>
    `;

    const startGameButton = document.getElementById('start-game-button');

    document.getElementById('grid-size-buttons').addEventListener('click', (e) => {
        const button = e.target.closest('button');
        if (button && button.dataset.size) {
            currentGridSize = parseInt(button.dataset.size);
            document.querySelectorAll('#grid-size-buttons button').forEach(btn => btn.classList.remove('selected'));
            button.classList.add('selected');
            checkCanStartGame();
        }
    });

    document.getElementById('risk-level-buttons').addEventListener('click', (e) => {
        const button = e.target.closest('button');
        if (button && button.dataset.risk) {
            currentRiskLevel = button.dataset.risk;
            document.querySelectorAll('#risk-level-buttons button').forEach(btn => btn.classList.remove('selected'));
            button.classList.add('selected');
            checkCanStartGame();
        }
    });

    function checkCanStartGame() {
        if (currentGridSize > 0 && currentRiskLevel !== '') {
            startGameButton.disabled = false;
        } else {
            startGameButton.disabled = true;
        }
    }

    startGameButton.addEventListener('click', renderMines);
    showMessage('');
}

function generateMinesGrid() {
    const boardSize = currentGridSize * currentGridSize;
    const config = RISK_LEVELS[currentRiskLevel];
    minesCount = Math.max(1, Math.floor(boardSize * config.minePercentage)); 
    multiplierPerTile = config.multiplierIncrease;

    minesGridState = Array(boardSize).fill(false);
    let minePositions = new Set();
    while (minePositions.size < minesCount) {
        minePositions.add(Math.floor(Math.random() * boardSize));
    }
    minePositions.forEach(index => {
        minesGridState[index] = true;
    });
}

function renderMines() {
    generateMinesGrid();
    tilesRevealed = 0;
    currentMultiplier = 1.0;

    gameArea.innerHTML = `
        <div class="stage-card">
            <h2>Mines - ${currentGridSize}x${currentGridSize} - ${currentRiskLevel.charAt(0).toUpperCase() + currentRiskLevel.slice(1)}</h2>
            <p>Click on a tile to reveal it. Watch out for mines!</p>
            <p>Current Multiplier: <span id="mines-multiplier-display">${currentMultiplier.toFixed(2)}x</span></p>
            <div id="mines-grid" class="mines-grid grid-${currentGridSize}x${currentGridSize}">
                <!-- Tiles will be generated by JavaScript -->
            </div>
            <div class="game-controls">
                <button id="cash-out-button" disabled>Cash Out (${currentMultiplier.toFixed(2)}x)</button>
            </div>
        </div>
    `;

    const gridContainer = document.getElementById('mines-grid');
    const minesMultiplierDisplay = document.getElementById('mines-multiplier-display');
    const cashOutButton = document.getElementById('cash-out-button');

    for (let i = 0; i < (currentGridSize * currentGridSize); i++) {
        const button = document.createElement('button');
        button.className = 'mine-tile';
        button.dataset.index = i;
        gridContainer.appendChild(button);
    }

    const tiles = document.querySelectorAll('.mine-tile');

    tiles.forEach(tile => {
        tile.addEventListener('click', () => {
            const index = parseInt(tile.dataset.index);
            if (tile.classList.contains('revealed')) return;

            if (minesGridState[index]) {
                tile.classList.add('mine', 'revealed');
                showMessage("BOOM! You hit a mine! Funds halved.", true);
                playerMoney /= 2;
                updateMoneyDisplay();
                endMinesGame(false);
            } else {
                tile.classList.add('safe', 'revealed');
                tilesRevealed++;
                currentMultiplier = 1.0 + (multiplierPerTile * tilesRevealed);
                minesMultiplierDisplay.textContent = currentMultiplier.toFixed(2) + 'x';
                cashOutButton.disabled = false;
                cashOutButton.textContent = `Cash Out (${currentMultiplier.toFixed(2)}x)`;

                if (tilesRevealed === ((currentGridSize * currentGridSize) - minesCount)) {
                    showMessage("Congratulations! You found all the safe tiles!", false);
                    endMinesGame(true);
                }
            }
        }, { once: true });
    });

    cashOutButton.addEventListener('click', () => {
        showMessage(`Cashing out with a ${currentMultiplier.toFixed(2)}x multiplier!`, false);
        playerMoney *= currentMultiplier;
        updateMoneyDisplay();
        endMinesGame(true);
    });
    showMessage('');
}

function endMinesGame(didWin) {
    const tiles = document.querySelectorAll('.mine-tile');
    tiles.forEach(tile => {
        const index = parseInt(tile.dataset.index);
        if (minesGridState[index]) {
            tile.classList.add('mine', 'revealed');
        } else {
            tile.classList.add('safe', 'revealed');
        }
        tile.disabled = true;
    });

    document.getElementById('cash-out-button').disabled = true;

    let buttonsHtml = ``;
    if (playerMoney < 100) {
        buttonsHtml = `
            <button id="recharge-funds-button">Recharge Funds ($100)</button>
            <button id="change-settings-button">Change Settings</button>
        `;
    } else {
        buttonsHtml = `
            <button id="play-again-button">Play Again</button>
            <button id="change-settings-button">Change Settings</button>
        `;
    }

    setTimeout(() => {
        gameArea.innerHTML += `
            <div class="continue-prompt">
                <p>Your new balance is: $${playerMoney.toFixed(2)}</p>
                ${buttonsHtml}
            </div>
        `;

        if (playerMoney < 100) {
            document.getElementById('recharge-funds-button').addEventListener('click', () => {
                playerMoney = 100.00; 
                updateMoneyDisplay();
                showSelectionScreen();
            });
        } else {
            document.getElementById('play-again-button').addEventListener('click', renderMines);
        }
        document.getElementById('change-settings-button').addEventListener('click', showSelectionScreen);
    }, 2000);
}

// -- Initialize Gamee ---
document.addEventListener('DOMContentLoaded', showStartScreen);
updateMoneyDisplay();

